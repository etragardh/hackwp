from helpers import pbinfo, psuccess, perror, get_realpath
import os#, json
from packaging.version import Version
from importlib.machinery import SourceFileLoader
class hwpe:

    def __init__(self, args, core, theme, plugins):
        self.args = args
        self.e_path = get_realpath() + '/exploits/'

        self.core = core
        self.theme = theme
        self.plugins = plugins

    def scan(self):

        # Target Surfaces
        surfaces = self.get_surfaces()

        usable_exploits = []
        # Walk local exploits
        for surface in os.listdir(self.e_path):
#            print("="*20)
#            print("= Surface:", surface)
            if surface == '__pycache__':
                continue
            if surface not in surfaces:
                continue
       
            for exp in os.listdir(self.e_path + surface):
#                print("+"*20)
#                print("+ Exp:", exp)
                if exp == '__pycache__':
#                    print("... cache")
                    continue
                if not os.path.isdir(self.e_path + surface + '/'+ exp):
#                    print("... no dir")
                    continue

                exploit_path = self.e_path + f'{surface}/{exp}/main.py'
                exploit = SourceFileLoader("Exploit Module",exploit_path).load_module()

                vuln_data = exploit.get_vuln_data()
#                print("+ Vuln data:", vuln_data)
                if self.is_vulnerable(vuln_data):
                    usable_exploits.append({
                        'surface': surface,
                        'exploit': exp,
                        'author': exploit.get_author(),
                        'methods': exploit.get_methods(),
                        'auth': exploit.is_auth_required()
                    })
#                    print("-> Exploit:", surface + '/' +exp)
#                    print("-> Author:", exploit.get_author())

#                print("+ + DELETING exploit", exploit)
                del exploit
        return usable_exploits

    
    def is_vulnerable(self, data):
       
        if data['core'] is None:
            perror('Vuln data invalid')

        # WP Core
        if data['core'] is not False:
            core_affected = self.is_affected(self.core['version'], data['core']['versions'])
            if core_affected is False:
                return False

        # Theme
        if data['theme'] is not False:
            theme_affected = self.is_affected(self.theme['version'], data['theme']['versions'])
            if theme_affected is False:
                return False

        # Plugin
        if data['plugins'] is not False:            # Required plugins
            for req_plugin in data['plugins']:      # -- "" --
                for present_plugin in self.plugins:
#                    print("checking req plugin:", req_plugin)
#                    print("-> against present_plugin:", present_plugin)
#                    print("-- > present v:", self.plugins[present_plugin])
#                    print("-- > req v:", data['plugins'][req_plugin]['versions'])
                    p_v = self.plugins[present_plugin]
                    r_v = data['plugins'][req_plugin]['versions']

                    plugin_affected = self.is_affected(p_v, r_v)
                if plugin_affected is False:
                    return False

        return True

    def is_affected(self, version, affected_versions):
        if version is False:
            return "maybe"
        vfrom = affected_versions['from']
        vfrom = '0' if vfrom == '*' else vfrom
        vto = affected_versions['to']
        return Version(vfrom) <= Version(version) <= Version(vto)

    def get_surfaces(self):

        # Always include core
        surfaces = ['core']

        # Theme
        surfaces.append(self.theme['slug'])

        # Plugins 
        for slug in self.plugins:
            surfaces.append(slug)

        return surfaces

    def next_move(self, surface, exploit, methods, auth):
        msg = f"~# hackwp --target {self.args.target} --attack {surface} --exploit {exploit} --payload test-{methods[0].lower()}"

        if auth:
            msg = msg + ' --auth'

        pbinfo(msg)
