#!/usr/bin/env python3

import os, re, shutil, time
#from session import *
from helpers import * 
from scanner.scanner import hwps 
from importlib.machinery import SourceFileLoader
from debug import hwpd

# FIXME: dont use this one here ?
from networking import hwpn

#FIXME: move form scanner to core
from scanner.crawler import hwpc
from parser import hwp_parser as hwpp

# Parse arguments
parser = hwpp.create()
args = parser.parse_args()
args.silent = False

##
# Debugger
d = hwpd(args.debug)
d.msg("Debugger started", args)
if args.debug:
    args.verbose = True

##
# Create ~/.hackwp directory if not exists
hackwp_dir = get_hackwp_dir() 
if not os.path.isdir(hackwp_dir):
    perror("~/.hackwp path not found..")
    try:
        os.mkdir(hackwp_dir)
        pinfo("~/.hackwp created")
    except OSError as error:
        perror(error)

# Path to real installation, not symlink
realpath = get_realpath()

# Run without target
if not args.target:
    hwp_ascii()
    psuccess("Version:", get_version())
    exit()
else:
    if not args.scan and not args.attack:
        hwp_ascii()
        perror("You must supply --scan or --attack")
        exit()

    if not args.target.startswith('http'):
        args.target = 'http://' + args.target


# HackWP Networking
# FIXME: change to HackWP
n = hwpn(args)
c = hwpc(args)

##
# Normalize --target
if args.target:
    args.target = args.target.strip("/")

##
# Extract sessions and exit
# FIXME: n is not hackwp
if args.auth_extraction:
    d.msg("Auth extraction")
    n.extract_auth()
    exit()

##
# Handle Cache (only if we have a target)
domain = get_domain(args.target)
cache_dir = get_hackwp_dir() + "/" + domain + ".cache/"

# Purge Cache
if args.purge_cache:
    d.msg("Cache is purged")
    if os.path.isdir(cache_dir):
        shutil.rmtree(cache_dir)

# Create cache dir
if not os.path.isdir(cache_dir):
    d.msg("cache patch created")
    os.mkdir(cache_dir)
  
##
# Spoofer
if args.no_spoof:
    d.msg("IP & UA spoof is OFF")
    args.no_spoof_ip = True
    args.no_spoof_ua = True

##
# Fix human "errors"
# www or not www
# https or http
resp = c.fetch(args.target) 
print(resp)
print(resp.history)
if resp.history and resp.history[0].status_code in [301, 302]:
    args.target = resp.url.strip('/')
    d.msg("redirect to:", args.target)

##
# Scan target and exit
if args.scan:
    d.msg("Starting scanner")
    scan_message(args)
    s = hwps(args)
    try:
        s.scan();
    except KeyboardInterrupt:
        print("Stopping")
        exit()
    exit()

##
# Start attack mode
if args.attack:
    if not args.exploit or not args.target or not args.payload:
        perror("--exploit is required")
        perror("--target is required")
        perror("--payload is required")
        exit()
    surface  = args.attack
    exploit = args.exploit
    exploit_path = realpath + '/exploits/'+surface+'/'+exploit+'/main.py'
    payload_path = realpath + '/payloads/'+args.payload+'/main.py'
    exploit = SourceFileLoader("Exploit Module",exploit_path).load_module()
    payload = SourceFileLoader("Payload Module",payload_path).load_module()

    method = payload_is_compatible(exploit, payload) 
    if not method:
        perror("This payload is not available for this exploit")
        pwarn("Exploit can handle:", exploit.get_methods())
        pwarn("The payload needs", payload.get_methods())
        exit()

    # Override automatic method
    method = args.method if args.method else method

    # Go
    # FIXME: This should be loaded dynamically
    launch_message(exploit, payload, args)
    instructions = payload.get_instructions(method, args)
    iid = False
    for instruction in instructions:
        if method == 'RCE':
            exploit.rce(instruction, args)
        elif method == 'LFI':
            exploit.lfi(instruction, args)
        elif method == 'RFI':
            exploit.rfi(instruction, args)
        elif method == 'SQLe':
            if iid:
                instruction = re.sub('#iid#', iid, instruction)
                iid = False
            res = exploit.sqle(instruction, args)
            if res['iid']:
                iid = res['iid']

        elif method == 'SQLr':
            exploit.sqlr(instruction, args)
    exit()

hwp_ascii()
psuccess("Version:", get_version())

#r = hwpn(args)
#res = r.post(args.target, json={'testing':'test'})
#print(res.text)
