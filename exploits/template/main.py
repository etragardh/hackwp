from helpers import *
import re, requests

##
# HackWP Exploit
# <surface> <exploit-method> 
# version: 0.1

##
# HackWP needs to know how to determine if
# this target is vulnerable to this exploit
# if multiple surfaces, all needs to be present
def get_vuln_data():
    return { 
        'core': False,
        'theme': {
            'slug':     'hello-elementor',
            'versions': {
                'from': '*',
                'to':   '1.9.6'
            }
        },
        'plugins': {
            {
                'slug':     'elementor-pro',
                'versions': {
                    'from': '1.2.1',
                    'to':   '1.2.3.1'
                }
            }
        },
        'custom': False
    }

##
# Custom test if target is vulnerable
# ie it cannot be determined by software
# and versions. Or it is hard to get those.
def is_vulnerable(target):
    return False

##
# HackWP needs to know what this exploit can do
def get_methods():
    return ['RCE', 'LFI', 'RFI', 'SQLe', 'SQLr']

##
# HackWP needs to know if this is authenticated or not
# If it is, HackWP can send stolen cookies / hijacked session
# with every request
def is_auth_required():
    return False

##
# HackWP needs a function for each attack method
# that is specified in get_methods()

##
# Remote Code Execution
# Return: (str) output_of_php_execution
def rce(instruction, args):
    if args.verbose: pinfo("Execute PHP:", instruction)

##
# Local File Inclusion
# Return: (str) file_contents
def lfi(instruction, args):
    if args.verbose: pinfo("Include:", instruction)

##
# Remote File Inclusion
# Return:
# {
#   'success':  (bool) True,                    # Upload succedded or failed
#   'url':      (str) 'https://e.com/file.php', # URL to file
#   'abspath':  (str) '/var/www/file.php',      # Target abspath to file
# }
def rfi(instruction, args):
    if args.verbose: pinfo("Upload:", instruction)

##
# SQL Execution
# Return:
# {
#   'success':  (bool) True,        # Execution succedded or failed
#   'rows':     (int) 1,            # How many rows affected
#   'iid':      (int) 1,            # Auto incremented ID if any
# }
def sqle(instruction, args):
    if args.verbose: pinfo("Execute SQL:", instruction)

##
# SQL Read
# Return: see SQL Execution
def sqlr(instruction, args):
    if args.verbose: pinfo("Read SQL:", instruction)

# Author nickname
def get_author():
    return "@etragardh"

##
# Special thanks to:
def get_thanks():
    return False
